[{"Id":241486408,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/460","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/460","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/460/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/460/events","Number":460,"State":0,"Title":"Clues for persisting UWP app state?","Body":"Hi, I'm new to UWP + CM so bear with me, anyway I hope this is going to be helpful for newcomers. I'm asking about the suggested way of implementing some basic save/load state in an UWP app lifecycle.\r\n\r\nAs far as I can tell from CM code samples, the extension points are found in `App.xaml.cs`:\r\n\r\n- `OnLaunched`: if `e.PreviousExecutionState == ApplicationExecutionState.Terminated`, this publishes a `ResumeStateMessage`. The implication is that all my VM classes which want to persist their state should handle this message, get their data from some shared store, and restore their state.\r\n\r\n- `OnSuspending`: this publishes a `SuspendStateMessage`. Here too I suppose my VM classes should handle this message, adding the state data to the store.\r\n\r\nNow that's fine, but I'm not sure about persisting the state data to disk. Say I have a simple, singleton service which uses a `Dictionary<string,object>` to hold state data; it could be as simple as the one pasted below (see the end of this post). I could inject it in any VM requiring to persist its state, and then handle the corresponding messages in the VM like:\r\n\r\n        public void Handle(SuspendStateMessage message)\r\n        {\r\n            _navigationService.SuspendState();\r\n            // save to store... e.g.:            \r\n            _state.Store[\"somekey\"] = SomeProperty;\r\n        }\r\n    \r\n        public void Handle(ResumeStateMessage message)\r\n        {\r\n            _bResume = true;\r\n            // load from store... e.g.:\r\n            SomeProperty = _state.Get(\"somekey\", null);\r\n        }\r\n\r\nYet, how am I supposed to handle the serialization of this dictionary from/to disk? The main issue here is that this serialization implies an async operation. Thus, in `App.xaml.cs`, `OnLaunched`, I could do something like first loading the state from disk, and THEN publish the `ResumeStateMessage`, so that data is available for restore:\r\n\r\n    if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)\r\n    {\r\n        _state.LoadAsync()\r\n              .ContinueWith(t =>\r\n            {\r\n                _events.PublishOnUIThread(new ResumeStateMessage());\r\n            } );\r\n    }\r\n\r\nBUT, how could I do the inverse, i.e. store the state? Again in `App.xaml.cs`, `OnSuspending`:\r\n\r\n    protected override void OnSuspending(object sender, SuspendingEventArgs e)\r\n    {\r\n        _events.PublishOnUIThread(new SuspendStateMessage(e.SuspendingOperation));\r\n        // TODO save state\r\n    }\r\n\r\nThe method just publishes a message to any VM wanting to add state data to the store (the dictionary). But I cannot know when each VM will complete its operation, so where should I save the store to file? Should I just add to the method something like `_state.SaveAsync(e).Wait();`, this would fail when not all the data have been stored by the VM handling the message. Should I call `SaveAsync` from each message handler, this would be rather inefficient, and would pose the risk of file write failure due to locking. So, in a simple scenario like this, how am I supposed to handle the state serialization, which typically will be async?\r\n\r\nHere is my complete state service class:\r\n\r\n    public sealed class StateService\r\n    {\r\n        private const string FILE_NAME = \"store.xml\";\r\n        public Dictionary<string, object> Store { get; }\r\n    \r\n        public StateService()\r\n        {\r\n            Store = new Dictionary<string, object>();\r\n        }\r\n    \r\n        public async Task SaveAsync(SuspendingEventArgs e)\r\n        {\r\n            SuspendingDeferral deferral = e.SuspendingOperation.GetDeferral();\r\n            Store.Add(\"timestamp\", DateTime.UtcNow);\r\n    \r\n            MemoryStream ms = new MemoryStream();\r\n            DataContractSerializer serializer = new DataContractSerializer(typeof(Dictionary<string, object>));\r\n            serializer.WriteObject(ms, Store);\r\n    \r\n            StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync\r\n                (FILE_NAME, CreationCollisionOption.ReplaceExisting);\r\n    \r\n            using (Stream stream = await file.OpenStreamForWriteAsync())\r\n            {\r\n                ms.Seek(0, SeekOrigin.Begin);\r\n                await ms.CopyToAsync(stream);\r\n                await stream.FlushAsync();\r\n            }    \r\n            deferral.Complete();\r\n        }\r\n    \r\n        public async Task LoadAsync()\r\n        {\r\n            StorageFile file = \r\n                await ApplicationData.Current.LocalFolder.GetFileAsync(FILE_NAME);\r\n            if (file == null) return;\r\n    \r\n            using (IInputStream stream = await file.OpenSequentialReadAsync())\r\n            {\r\n                DataContractSerializer serializer = \r\n                    new DataContractSerializer(typeof(Dictionary<string, object>));\r\n                Dictionary<string, object> dct = (Dictionary<string, object>)\r\n                    serializer.ReadObject(stream.AsStreamForRead());\r\n                Store.Clear();\r\n                foreach (var de in dct) Store[de.Key] = de.Value;\r\n            }\r\n        }\r\n    \r\n        public void Set(string key, object value, bool removeNull = true)\r\n        {\r\n            if (key == null) throw new ArgumentNullException(nameof(key));\r\n            if (value == null && removeNull && Store.ContainsKey(key)) Store.Remove(key);\r\n            else Store[key] = value;\r\n        }\r\n    \r\n        public string Get(string key, string defaultValue)\r\n        {\r\n            if (key == null) throw new ArgumentNullException(nameof(key));\r\n            return Store.ContainsKey(key) ? (string) Store[key] : defaultValue;\r\n        }\r\n    \r\n        public bool Get(string key, bool defaultValue)\r\n        {\r\n            if (key == null) throw new ArgumentNullException(nameof(key));\r\n            return Store.ContainsKey(key) ? (bool)Store[key] : defaultValue;\r\n        }\r\n    \r\n        public int Get(string key, int defaultValue)\r\n        {\r\n            if (key == null) throw new ArgumentNullException(nameof(key));\r\n            return Store.ContainsKey(key) ? (int)Store[key] : defaultValue;\r\n        }\r\n    \r\n        public T Get<T>(string key) where T : class\r\n        {\r\n            if (key == null) throw new ArgumentNullException(nameof(key));\r\n            return Store.ContainsKey(key) ? (T)Store[key] : null;\r\n        }\r\n    }\r\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/2099848?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/Myrmex","Id":2099848,"Location":null,"Login":"Myrmex","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/Myrmex"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":0,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-07-08T23:08:02+00:00","UpdatedAt":"2017-07-08T23:08:02+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/460/reactions"}},{"Id":240431487,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/459","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/459","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/459/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/459/events","Number":459,"State":0,"Title":"BootstrapperBase should call Configure before SelectAssemblies","Body":"In the BootstrapperBase class is the following code used for DesignTime, however the call to SelectAssemblies() is made before the call to Configure(). This makes the behaviour weird when having custom IoC (I use Autofac) and also using this in overload of SelectAssemblies() for views (which may have relation to registered DesignTime ViewModels)..\r\nI think the Configuration() should be finished before the call to SelectAssemblies() or is there any reason I don't see here? (following snippet from BootStrapperBase)\r\n\r\n```\r\n    protected virtual void StartDesignTime()\r\n    {\r\n      AssemblySource.Instance.Clear();\r\n      AssemblySource.Instance.AddRange(this.SelectAssemblies());\r\n      this.Configure();\r\n      IoC.GetInstance = new Func<Type, string, object>(this.GetInstance);\r\n      IoC.GetAllInstances = new Func<Type, IEnumerable<object>>(this.GetAllInstances);\r\n      IoC.BuildUp = new System.Action<object>(this.BuildUp);\r\n    }\r\n```\r\n\r\nThe twisted order forces me to do this in my custom Bootstrapper (derived from BootstrapperBase):\r\n\r\n```\r\n        // need to override cause viewmodels and views are in other assembly than application\r\n        protected override IEnumerable<Assembly> SelectAssemblies()\r\n        {\r\n            this.InitializeContainer();\r\n\r\n            return this.assemblies;\r\n        }\r\n\r\n        protected override void Configure()\r\n        {\r\n            this.InitializeContainer();\r\n        }\r\n\r\n        private void InitializeContainer()\r\n        {\r\n            if (this.alreadyRun) return;\r\n\r\n            this.alreadyRun = true;\r\n\r\n            var builder = new ContainerBuilder();\r\n```\r\nbecause I made some custom registrations for the DesignTime:\r\n\r\n```\r\n            if (Execute.InDesignMode)\r\n            {\r\n                ViewLocator.NameTransformer.AddRule(\r\n                    @\"(?<ns>[.\\w]*)(?<dt>.DesignTime.Design)(?<basename>\\w*)(Model)$\",\r\n                    @\"${ns}.${basename}\");\r\n\r\n                var uri = new UriBuilder(Assembly.GetCallingAssembly().CodeBase);\r\n                var directory = Path.GetDirectoryName(Uri.UnescapeDataString(uri.Path));\r\n\r\n                if (!string.IsNullOrEmpty(directory) && Directory.Exists(directory))\r\n                {\r\n                    var catalog = new DirectoryCatalog(directory);\r\n\r\n                    builder.RegisterComposablePartCatalog(catalog);\r\n                }\r\n\r\n                builder.RegisterType<DesignChildViewModel>().As<IChildViewModel>();\r\n                builder.RegisterType<DesignOtherViewModel>().As<IOtherViewModel>();\r\n\r\n                builder.RegisterType<DesignContainerViewModel>().As<IContainerViewModel>();\r\n            }\r\n```\r\nnow the DataContext set in ChildViews is respected during DesignTime (even from other Assembly), for example:\r\n\r\n`d:DataContext=\"{d:DesignInstance Type=designTime:DesignOtherViewModel, IsDesignTimeCreatable=True}\"`\r\n\r\nand can be assembled by the IoC:\r\n\r\n```\r\n    public class ContainerViewModel : Screen, IContainerViewModel\r\n    {\r\n        private readonly string text;\r\n\r\n        private readonly IScreen child;\r\n\r\n        private readonly IScreen other;\r\n\r\n        public ContainerViewModel(IChildViewModel child, IOtherViewModel other)\r\n        {\r\n            // wired by IoC\r\n            this.text = \"Container\";\r\n            this.child = child; // child in same assembly\r\n            this.other = other; // child in other assembly\r\n        }\r\n```\r\n\r\nwhile IoC resolves implementations of IChildViewModel and IOtherViewModel differently between RunTime and DesignTime (both ViewModels share same interfaces. This is nice because you don't forced to have all ViewModel dependencies of DesignTime during RunTime and allows being able to have something like this at DesignTime:\r\n\r\n![image](https://user-images.githubusercontent.com/2715897/27833178-e45c31ae-60d1-11e7-8b47-a1d677d3427e.png)\r\n\r\nand this at RunTime:\r\n\r\n![image](https://user-images.githubusercontent.com/2715897/27833194-00d9477c-60d2-11e7-92ca-93f91b7c40f0.png)\r\n\r\nInteresting?","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/2715897?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/beachwalker","Id":2715897,"Location":null,"Login":"beachwalker","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/beachwalker"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":1,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-07-04T14:07:54+00:00","UpdatedAt":"2017-07-17T10:55:47+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/459/reactions"}},{"Id":238550615,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/455","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/455","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/455/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/455/events","Number":455,"State":0,"Title":"[UWP] Stack overflow on main UI thread","Body":"**Overview:**\r\n\r\nWhile using the library, we've encountered a stack overflow exception on the main UI thread. Prior to the exception, we observed degrading performance over the course of 5 minutes on average. Performance eventually degraded to the point that appeared the application had hung. Eventually the stack overflow exception will occur. We've observed that the performance begins to degrade when our application opens a new WinRTContainer, which we refer to as a claim. If the claim is closed at any point prior to the crash, the performance of the application will return to the normal, functioning state.\r\n\r\nA description of the workarounds we've discovered, along with the actions that lead to the performance degradation, follow the remainder of the stack overflow problem description.\r\n\r\n**Stack Overflow:**\r\n\r\nIn the cases where we've encountered the stack overflow exception, we've observed the stack overflow occurred on the thread responsible for handling UI events. This stack was more than 11,000 method calls deep prior to the exception occurring. Within the stack, we noticed that the application init wasn't invoked until 45 lines from the top of the stack. \r\n\r\nClient.Program.Main(System.String[])), calling 00007ff987e403b0 (stub for Windows.UI.Xaml.Application.Start(Windows.UI.Xaml.ApplicationInitializationCallback))\r\n\r\nAt the bottom of the stack we see the thread start and UI events setup. Then we notice this 124 lines from the start of the thread:\r\n\r\n000000af9e6fd700 00007ff988958415 (MethodDesc 00007ff988c5e428 +0x65 Caliburn.Micro.ActionMessage+<>c.<.cctor>b__34_0(Caliburn.Micro.ActionExecutionContext))\r\n000000af9e6fd720 00007ff988955ae9 (MethodDesc 00007ff988c1ea00 +0x29 Caliburn.Micro.ActionExecutionContext.get_View()), calling coreclr!JIT_IsInstanceOfClass\r\n000000af9e6fd750 00007ff988958366 (MethodDesc 00007ff988c5e090 +0x346 Caliburn.Micro.ActionMessage.Invoke(System.Object))\r\n000000af9e6fd800 00007ff988957ff1 (MethodDesc 00007ff988c5dd10 +0x61 Caliburn.Micro.TriggerAction`1[[System.__Canon, mscorlib]].Execute(System.Object, System.Object))\r\n000000af9e6fd840 00007ff988957ed6 (MethodDesc 00007ff988096770 +0xd6 Microsoft.Xaml.Interactivity.Interaction.ExecuteActions(System.Object, Microsoft.Xaml.Interactivity.ActionCollection, System.Object))\r\n000000af9e6fd870 00007ff988957dc2 (MethodDesc 00007ff988c5ced0 +0x12 Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.OnEvent(System.Object, System.Object)), calling (MethodDesc 00007ff988c5ce30 +0 Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.get_Actions())\r\n\r\nWe see that Caliburn.Micro begins executing and running static initializers. This is very near the bottom of the stack immediately after starting the thread and setting up the window events.\r\n\r\nWe see this recurring pattern throughout the remainder of the stack prior to the app init eveer being called:\r\n\r\n00000069ac8b8690 00007ff98e9b4ff5 (MethodDesc 00007ff98ec89088 +0x65 Caliburn.Micro.ActionMessage+<>c.<.cctor>b__34_0(Caliburn.Micro.ActionExecutionContext))\r\n00000069ac8b86b0 00007ff98e9b2f49 (MethodDesc 00007ff98ec58f48 +0x29 Caliburn.Micro.ActionExecutionContext.get_View()), calling coreclr!JIT_IsInstanceOfClass\r\n00000069ac8b86e0 00007ff98e9b4b36 (MethodDesc 00007ff98ec88cf0 +0x346 Caliburn.Micro.ActionMessage.Invoke(System.Object))\r\n\r\nWe eventually begin to JIT and need to do a garbage collection. During the garbage collection we also noticed that the Client.Program.Main is invoked 45 lines prior to the stack overflow.\r\n\r\n**Re-entry:**\r\n\r\nIn addition, we are seeing two threads with Program.Main called. The initial entry is on thread 0 and expected. However, thread 27 also has a Program.Main called very late in the stack and this thread is where the stack overflow occurs.\r\n\r\n[reentry.txt](https://github.com/Caliburn-Micro/Caliburn.Micro/files/1102934/reentry.txt)\r\n\r\n**Workarounds:**\r\n\r\nWe've also observed another method which will restore the performance when the application begins to suffer. This approach does not require us to close the 'claim', but simply move our application to the background. If we switch to another application and then return to the app, we notice performance returns to normal.\r\n\r\n**Stack Overflow File:** \r\n[stackOverflow.txt](https://github.com/Caliburn-Micro/Caliburn.Micro/files/1102331/stackOverflow.txt)\r\n\r\nHas anyone experienced a similar issue?","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/29708185?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/Dave-Woolworth","Id":29708185,"Location":null,"Login":"Dave-Woolworth","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/Dave-Woolworth"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":7,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-06-26T13:53:34+00:00","UpdatedAt":"2017-07-09T05:47:39+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/455/reactions"}},{"Id":236822999,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/454","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/454","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/454/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/454/events","Number":454,"State":0,"Title":"Change the default view creation through DI and/or by directly calling Activator.CreateInstance","Body":"These changes change the manner in how C.M. creates view as discussed in #339.\r\n\r\nThe defaults are open for discussing. \r\n\r\nI chose the defaults in how I would like the framework to react. I can't determine this for other users although this implementation is much more towards 'fail fast' as we see many frameworks do nowadays.\r\n\r\nAlso added unittests for net45.\r\n\r\nAlthough the project builds successfully for some reason it keeps complaining in the IDE that it is missing references to `System` when I select .netstandard1.4. So I can't really see if this code (for x.f.) really will work. We'll have to test that in a x.f. application I think.\r\n\r\nLet me know what you think.\r\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/10180372?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/TheBigRic","Id":10180372,"Location":null,"Login":"TheBigRic","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/TheBigRic"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":0,"PullRequest":{"Id":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/pulls/454","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/454","DiffUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/454.diff","PatchUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/454.patch","IssueUrl":null,"StatusesUrl":null,"Number":0,"State":0,"Title":null,"Body":null,"CreatedAt":"0001-01-01T00:00:00+00:00","UpdatedAt":"0001-01-01T00:00:00+00:00","ClosedAt":null,"MergedAt":null,"Head":null,"Base":null,"User":null,"Assignee":null,"Assignees":null,"Milestone":null,"Merged":false,"Mergeable":null,"MergedBy":null,"Comments":0,"Commits":0,"Additions":0,"Deletions":0,"ChangedFiles":0,"Locked":false},"ClosedAt":null,"CreatedAt":"2017-06-19T09:00:02+00:00","UpdatedAt":"2017-06-19T09:06:38+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/454/reactions"}},{"Id":236284811,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/453","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/453","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/453/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/453/events","Number":453,"State":0,"Title":"XamarinStudio XAML Designer support","Body":"Hello There!\r\n\r\nWondering if you have any ideas on how to enable support for XAML Designer in XamarinStudio/VisualStudio Mac.\r\n\r\nOn the surface it requires and App with no-parameter constructor. That's easy to do, however since a CM project relies on SimpleContainer, there remains the issue of container setup and locating VMs at design time.\r\n\r\nAny input you have in this area would be appreciated.\r\n\r\nThanks,","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/4691637?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/assemhakmeh","Id":4691637,"Location":null,"Login":"assemhakmeh","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/assemhakmeh"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":0,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-06-15T19:03:09+00:00","UpdatedAt":"2017-06-15T19:03:09+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/453/reactions"}},{"Id":234978453,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/450","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/450","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/450/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/450/events","Number":450,"State":0,"Title":"Update Samples to use new assemblies","Body":"- [x] Remove unsupported samples platforms\r\n- [x] Have samples reference new projects output\r\n- [ ] Add UWP Xamarin.Forms Setup Sample\r\n- [ ] Add UWP Xamarin.Forms Features Sample","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/help%20wanted","Name":"help wanted","Color":"159818"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":18,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-06-10T04:08:21+00:00","UpdatedAt":"2017-07-11T11:28:19+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/450/reactions"}},{"Id":234374420,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/447","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/447","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/447/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/447/events","Number":447,"State":0,"Title":"Fix up assembly version for the 3.1.0 release.","Body":"I missed updating the assembly version in the 3.1.0 release.  Need to resolve this in 3.1.1\r\n\r\nAlso going on the backlog is something to the build / packing process so this doesn't need to happen.","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/8","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/8","Number":8,"State":0,"Title":"v3.1.1","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":1,"ClosedIssues":1,"CreatedAt":"2017-05-27T11:51:25+00:00","DueOn":null,"ClosedAt":null},"Comments":2,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-06-07T23:52:19+00:00","UpdatedAt":"2017-06-18T23:31:47+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/447/reactions"}},{"Id":230232396,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/438","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/438","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/438/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/438/events","Number":438,"State":0,"Title":"PlatformProvider.Current not safe when there are multiple UI threads","Body":"When there are multiple UI threads, things that need to run on the UI thread must use the proper Dispatcher for invoking methods.  Currently Screen.TryClose and the Execute.XXX methods all make use of the static PlatformProvider.Current property to find the Dispatcher to use.  This results in exceptions being thrown when using windows on more than one UI thread.\r\n\r\nI think this is related to issue #427.","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/18561161?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/EricGriffith","Id":18561161,"Location":null,"Login":"EricGriffith","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/EricGriffith"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"},{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/question","Name":"question","Color":"cc317c"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":3,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-05-21T16:41:16+00:00","UpdatedAt":"2017-05-22T23:20:34+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/438/reactions"}},{"Id":230170984,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/437","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/437","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/437/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/437/events","Number":437,"State":0,"Title":"Xamarin TapGestureRecognizer binding has no effect","Body":"The following doesn't seem to do anything. Is this a limitation of the binding implementation? This binding is being used in Xamarin.Forms.\r\n\r\n```csharp\r\n<Label Text=\"Forgot Password?\">\r\n  <Label.GestureRecognizers>\r\n    <TapGestureRecognizer forms:Message.Attach=\"[Event Tapped] = [Action NavigateToForgotPasswordAsync()]\" />\r\n  </Label.GestureRecognizers>\r\n</Label>\r\n```","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/680484?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/gregbty","Id":680484,"Location":null,"Login":"gregbty","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/gregbty"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":0,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-05-20T18:29:48+00:00","UpdatedAt":"2017-05-20T18:29:48+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/437/reactions"}},{"Id":222186176,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/427","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/427","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/427/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/427/events","Number":427,"State":0,"Title":"EventAggregator Issue with multiple Windows UWP","Body":"Hello I am developing a UWP application I need to send message from Window 1 to Window 2 using eventAggregator I'm using this code to send the message \r\n    await eventAggregator.PublishOnUIThreadAsync(new myObject());\r\n\r\nIt's working fine but after to send the message all the properties of my VM have this problem\r\n'Unable to cast COM object of type 'System.ComponentModel.PropertyChangedEventHandler' to class type 'System.ComponentModel.PropertyChangedEventHandler'. Instances of types that represent COM components cannot be cast to types that do not represent COM components; however they can be cast to interfaces as long as the underlying COM component supports QueryInterface calls for the IID of the interface\r\n\r\nIf I remove the eventAggregator code (for sending the message) my ViewModel and all the properties are working again.\r\nI used all of these methods with the same result.\r\nPublishOnBackgroundThread\r\nPublishOnCurrentThread\r\nPublishOnUIThread\r\n\r\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/8105850?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/RikardoPons","Id":8105850,"Location":null,"Login":"RikardoPons","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/RikardoPons"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":10,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-04-17T17:56:15+00:00","UpdatedAt":"2017-04-24T02:02:55+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/427/reactions"}},{"Id":216578969,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/422","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/422","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/422/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/422/events","Number":422,"State":0,"Title":"Re-entrancy issue with async actions","Body":"Think of a button on the UI which calls an async action on the target ViewModel:\r\n\r\n```\r\npublic async Task DoSomething()\r\n{\r\n    await Task.Delay(5000);\r\n}\r\n```\r\n\r\nThis does not block the UI (which is what we want) but it will also allow to press the button again, resulting in the action being invoked again, while the previous action is not yet completed (which we don't want).\r\n\r\nA common solution to this would be to disable/enable the button or to serialize the calls using a semaphore or to early return from the method on the second invocation.\r\n\r\nBut having dozens of such action invocations all over the place would introduce a lot of \"code noise\" in the view models.\r\n\r\nIt would be nice, to be able to tell caliburn micro, to not invoke an action on a target when a previous action is not yet finished. Something like this:\r\n\r\n`<Button cal:Message.Attach=\"DoSomething\" cal:Message:Reentrancy=\"false\" />`\r\n\r\nWould this be a good idea? Or is there already a way to do this?","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/26636290?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/Qamo","Id":26636290,"Location":null,"Login":"Qamo","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/Qamo"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":4,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-03-23T21:31:12+00:00","UpdatedAt":"2017-03-30T11:40:34+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/422/reactions"}},{"Id":211688066,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/420","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/420","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/420/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/420/events","Number":420,"State":0,"Title":"How to apply conventions to external hosting view (DXDialog)","Body":"I have a `DXDialog `WPF component (it is a Window descendant with public Button objects): [DXDialog](https://documentation.devexpress.com/#WPF/clsDevExpressXpfCoreDXDialogtopic)\r\n\r\nI have created a custom `View `and `ViewModel` for its `Content `and it works.\r\n\r\nThe dialog has public buttons, one of them is called `OkButton`.\r\n\r\nI intend to have a public method called `OkButton `in my custom `ViewModel`.\r\n\r\nUnfortunately, when I call the following code, it does not apply any convention (like if it skipped the hosting control, and only the \"inner\" view is processed).\r\n\r\nThis is how I try to force the use of conventions:\r\n\r\n\r\n```csharp\r\n protected override Window CreateWindow(object rootModel, bool isDialog, object context, IDictionary<string, object> settings)\r\n    {\r\n      var tmpWindow = base.CreateWindow(rootModel, isDialog, context, settings);\r\n      DXDialog dialog = new DXDialog();\r\n      dialog.Content = tmpWindow.Content;\r\n      dialog.DataContext = rootModel;\r\n      dialog.MinHeight = 150;\r\n      dialog.MinWidth = 300;\r\n      dialog.SizeToContent = SizeToContent.WidthAndHeight;\r\n      dialog.ResizeMode = ResizeMode.NoResize;\r\n      dialog.WindowStartupLocation = WindowStartupLocation.CenterOwner;\r\n      dialog.SetValue(View.IsGeneratedProperty, false);\r\n      dialog.SetValue(View.ApplyConventionsProperty, true);\r\n\r\n      dialog.Loaded += (x, y) => { SetItems(dialog); ViewModelBinder.Bind(rootModel, dialog, context); };\r\n      tmpWindow = null;\r\n      return dialog;\r\n    }\r\n```\r\nMy ViewModel:\r\n\r\n```csharp\r\npublic class CustomViewModel: ViewAware, IClose\r\n{\r\n   public void OkButton()\r\n   {\r\n    //Do something\r\n   }\r\n}\r\n```\r\n\r\nI can see this in the log:\r\n\r\n> CM_INFO: Binding DevExpress.Xpf.Core.DXDialog and MyProject.ViewModel.CustomViewModel.\r\n> CM_INFO: Setting DC of DevExpress.Xpf.Core.DXDialog to MyProject.ViewModel.CustomViewModel.\r\n> ...\r\n> CM_INFO: Action Convention Not Applied: No actionable element for OkButton.\r\n\r\nAny idea how I could make it work?\r\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/4659744?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nologinatgit","Id":4659744,"Location":null,"Login":"nologinatgit","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nologinatgit"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/more%20info%20required","Name":"more info required","Color":"fbca04"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":9,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-03-03T13:30:32+00:00","UpdatedAt":"2017-06-18T23:30:23+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/420/reactions"}},{"Id":209129577,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/416","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/416","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/416/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/416/events","Number":416,"State":0,"Title":"Event Aggregator marshaller set by subscription","Body":"Is it viable to have IEventAggregator where the subscriber will specify the type of thread marshaller it supports (UI thread vs background job) and the event aggregator Publish() method will be thread agnostic?\r\n\r\nFor example, MvvmCross `IMvxMessenger` interface has these methods:\r\n\r\n```\r\nSubscribe()\r\nSubscribeOnMainThread()\r\nSubscribeOnThreadPoolThread()\r\nPublish()\r\n```\r\n\r\nCan this pattern be used with Caliburn? Or are there some specifics why Caliburn requires the Publisher to set the thread?","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/287778?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/jozefizso","Id":287778,"Location":null,"Login":"jozefizso","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/jozefizso"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":3,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-02-21T12:21:24+00:00","UpdatedAt":"2017-03-31T10:04:55+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/416/reactions"}},{"Id":203638506,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/409","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/409","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/409/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/409/events","Number":409,"State":0,"Title":"Why Task of IHandleWithTask is not awaited by default?","Body":"I've implemented a class using IHandleWithTask.\r\nI found that the EventAggregator does not await the result of the invoked method.\r\nIs there any (design) reason to do so?\r\n\r\nThe messages can be invoked synchronous or asynchronous by e.g. using PublishOnUIThread and PublishOnUIThreadAsync. So if user want to \"fire and forget\", so PublishOnUIThreadAsync can be used. Consistently PublishOnUIThread should not return before all Handle calls are complete.","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/1819493?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/lukas-ais","Id":1819493,"Location":null,"Login":"lukas-ais","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/lukas-ais"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":1,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2017-01-27T13:43:18+00:00","UpdatedAt":"2017-02-07T13:44:17+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":2,"Plus1":2,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/409/reactions"}},{"Id":190934347,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/391","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/391","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/391/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/391/events","Number":391,"State":0,"Title":"Transition to async API","Body":"This is not an issue or feature request, it's more a discussion and I want to share my observations about moving the API of caliburn to only support an async version as also discussed [Full Async Support](https://github.com/Caliburn-Micro/Caliburn.Micro/projects/2).\r\n\r\nI created a fork from the latest version where four commits have been done\r\n\r\n1. From **void** to **Task** for and their implementations (https://github.com/devhb/Caliburn.Micro/commit/dc7a971b63e843b28dcf24d22ebeb88209014c2a)\r\n- IActivate\r\n- IClose\r\n- ICloseStrategy\r\n- IConductor\r\n- IDeactivate\r\n- IGuardClose\r\n\r\n2. Added CancellationToken to async methods (https://github.com/devhb/Caliburn.Micro/commit/fbca8b67f034d7b0a17846ab207d3b2d738472c7)\r\n3. Added cancellation (https://github.com/devhb/Caliburn.Micro/commit/9c6906346f2f5e07fa87090f2597b0c586289bc9)\r\n4. Moved notification about the ActiveItem before calling Activate on the screen so the view is displayed before executing any code (https://github.com/devhb/Caliburn.Micro/commit/2decc680890dadfbd739b5b1a2278758f1810af6)\r\n\r\nIf point 4 is not done, we will see the view for the screen first when the \"OnActivate\" is completly run.\r\n\r\nThe current version from the fork is currently used in a WPF application to test it under production circumstances, till everything seems to working fine.\r\n\r\nOpen points\r\n- how to best handle activate/deactivate (Should a screen handle it's own tokens if none where provided as method parameters?)\r\n\r\nAny comments about the transition are welcome.\r\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars1.githubusercontent.com/u/12906130?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/devhb","Id":12906130,"Location":null,"Login":"devhb","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/devhb"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/question","Name":"question","Color":"cc317c"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":22,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-11-22T08:22:24+00:00","UpdatedAt":"2017-03-03T09:06:39+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":7,"Plus1":7,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/391/reactions"}},{"Id":188208257,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/388","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/388","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/388/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/388/events","Number":388,"State":0,"Title":"Mapping \"design-time\" view models to matching views","Body":"I have a \"DesignTime\" prefix for every view model, and a special DesignTimeViewModelLocator that configures the IoC container accordingly. What is the most simple way to also support DesignTimeMyViewModel -> MyView convention without breaking default naming conventions? thanks.","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/6965177?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/superware","Id":6965177,"Location":null,"Login":"superware","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/superware"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":15,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-11-09T10:05:59+00:00","UpdatedAt":"2017-07-04T14:11:38+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":2,"Plus1":2,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/388/reactions"}},{"Id":184669368,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/383","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/383","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/383/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/383/events","Number":383,"State":0,"Title":"Xamarin.Mac support","Body":"Would love to use this under Xamarin.Mac (as a reference to a Cocoa C# app in Xamarin Studio on OS X).\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/371877?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/eavonius","Id":371877,"Location":null,"Login":"eavonius","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/eavonius"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":1,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-10-23T03:39:04+00:00","UpdatedAt":"2016-11-01T10:05:34+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/383/reactions"}},{"Id":180539190,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/374","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/374","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/374/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/374/events","Number":374,"State":0,"Title":"#372 change simple container resolution","Body":"changes to how SimpleContainer chooses the constructor to fullfill a request as discussed in Issue #372.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/2063360?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/jongleur1983","Id":2063360,"Location":null,"Login":"jongleur1983","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/jongleur1983"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":1,"PullRequest":{"Id":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/pulls/374","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/374","DiffUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/374.diff","PatchUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/374.patch","IssueUrl":null,"StatusesUrl":null,"Number":0,"State":0,"Title":null,"Body":null,"CreatedAt":"0001-01-01T00:00:00+00:00","UpdatedAt":"0001-01-01T00:00:00+00:00","ClosedAt":null,"MergedAt":null,"Head":null,"Base":null,"User":null,"Assignee":null,"Assignees":null,"Milestone":null,"Merged":false,"Mergeable":null,"MergedBy":null,"Comments":0,"Commits":0,"Additions":0,"Deletions":0,"ChangedFiles":0,"Locked":false},"ClosedAt":null,"CreatedAt":"2016-10-02T22:17:20+00:00","UpdatedAt":"2017-03-01T20:23:39+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/374/reactions"}},{"Id":179779295,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/372","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/372","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/372/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/372/events","Number":372,"State":0,"Title":"SimpleContainer not using the default constructor.","Body":"Hi,\n\nSimpleContainer is calling the wrong constructor should call AddinOptionsModel() instead of AddinOptionsModel(string filename). Example of code:\n\n```\npublic class AddinOptionsModel\n{\n    // Expected constructor to be called.\n    public AddinOptionsModel()\n        : this(\"Default\")\n    {\n        // ...\n    }\n\n    // Actual constructor called with fileName = null crashing the application. \n    public AddinOptionsModel(string fileName)\n\n    {\n        // ...\n    }\n\n}\n```\n\n// In Bootstrap Configuration\n            this._container.Singleton<AddinOptionsModel, AddinOptionsModel>();\n\n// In our code\n            this.AddinOptionsModel = IoC.Get<AddinOptionsModel>();\n\nRegards\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/20842920?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/adupontxpertdoc","Id":20842920,"Location":null,"Login":"adupontxpertdoc","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/adupontxpertdoc"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":3,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-09-28T13:53:01+00:00","UpdatedAt":"2016-10-02T21:06:22+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/372/reactions"}},{"Id":176947598,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/370","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/370","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/370/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/370/events","Number":370,"State":0,"Title":"OnUIThreadAsync() shutdown deadlock under .NET4 fix","Body":"This pull request fixes a deadlock that occurs under .NET 4.0 when the application is shut down while \"XamlPlatformProvider.OnUIThreadAsync().Wait()\" is called. The calling thread might stay in \"Wait()\" forever because the dispatcher operation that would wake it up via \"taskSource.SetResult(null)\" or \"taskSource.SetException(ex)\" gets aborted due to the shutdown. If the blocked thread is not a backgound thread, it will prevent the application from shutting down.\n\n\"XamlPlatformProvider.OnUIThreadAsync().Wait()\" was called in an earlier implementation of \"Execute.OnUIThread()\" which is used by \"PropertyChangedBase.NotifyOfPropertyChange()\". The deadlock is not so likely when using CM3 but still possible. \n\nThere might be the same problem in the silverlight version of \"XamlPlatformProvider.OnUIThread()\" (\"waitHandle.Set()\" is never called), but I don't use silverlight and have no solution for it.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/8622962?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/smischke","Id":8622962,"Location":null,"Login":"smischke","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/smischke"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":4,"PullRequest":{"Id":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/pulls/370","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/370","DiffUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/370.diff","PatchUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/pull/370.patch","IssueUrl":null,"StatusesUrl":null,"Number":0,"State":0,"Title":null,"Body":null,"CreatedAt":"0001-01-01T00:00:00+00:00","UpdatedAt":"0001-01-01T00:00:00+00:00","ClosedAt":null,"MergedAt":null,"Head":null,"Base":null,"User":null,"Assignee":null,"Assignees":null,"Milestone":null,"Merged":false,"Mergeable":null,"MergedBy":null,"Comments":0,"Commits":0,"Additions":0,"Deletions":0,"ChangedFiles":0,"Locked":false},"ClosedAt":null,"CreatedAt":"2016-09-14T15:58:59+00:00","UpdatedAt":"2017-03-08T21:54:10+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/370/reactions"}},{"Id":173989279,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/363","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/363","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/363/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/363/events","Number":363,"State":0,"Title":"Passing parameters always null using a usercontrol with custom events","Body":"I have a usercontrol with a custom routed event:\n\n```\npublic partial class DummyControl : UserControl\n{\n    public static readonly RoutedEvent ActionClickEvent = EventManager.RegisterRoutedEvent(\n        \"ActionClick\",\n        RoutingStrategy.Bubble,\n        typeof(RoutedEventHandler),\n        typeof(DummyControl));\n\n    public event RoutedEventHandler ActionClick\n    {\n        add { this.AddHandler(ActionClickEvent, value); }\n        remove { this.RemoveHandler(ActionClickEvent, value); }\n    }\n\n    public DummyControl()\n    {\n        this.InitializeComponent();\n    }\n\n    private void ButtonBase_OnClick(object sender, RoutedEventArgs e)\n    {\n        this.RaiseEvent(new RoutedEventArgs(ActionClickEvent,this));\n    }\n}\n```\n\nIn my xaml I'm using a datagrid and I want to pass the SlectedItem to my ViewModel. But when the event gets triggered, the passed item is alway null. When trying the same with an button everything works fine.\n\n`<Cstm:DummyControl cal:Message.Attach=\"[Event ActionClick] = [Action Test(dataGrid.SelectedItem)]\"/>`\n\nDon't know if this is a known bug or if I missed something. :\\\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/4427249?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/panhans","Id":4427249,"Location":null,"Login":"panhans","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/panhans"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":3,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-08-30T10:57:29+00:00","UpdatedAt":"2016-08-31T10:38:08+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/363/reactions"}},{"Id":171602454,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/356","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/356","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/356/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/356/events","Number":356,"State":0,"Title":"[UWP] FrameAdapter cannot remove event handler registered to frame ","Body":"1,Register instance with frame\n\n``` csharp\nvar frameAdapter = new FrameAdapter(frame);\nIocContainer.RegisterInstance(typeof(INavigationService), frame.Name, frameAdapter);\n```\n\n2,After page which the frame in is never used, try to unregister handle\n\n``` csharp\nIocContainer.UnregisterHandler(typeof(INavigationService), \"Frame Name\");\n```\n\n3,The instance of frameAdapter will never be released , because 3 event handler below was not be removed.(And it means that the page will never be deconstructed too)\n\n``` csharp\nthis.frame.Navigating += OnNavigating;\nthis.frame.Navigated += OnNavigated;\nvar navigationManager = SystemNavigationManager.GetForCurrentView();\n navigationManager.BackRequested += OnBackRequested;\n```\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars1.githubusercontent.com/u/3354458?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/grapehunter","Id":3354458,"Location":null,"Login":"grapehunter","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/grapehunter"},"Labels":[],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":5,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-08-17T08:31:21+00:00","UpdatedAt":"2017-06-08T01:20:02+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/356/reactions"}},{"Id":165313640,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/347","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/347","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/347/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/347/events","Number":347,"State":0,"Title":"IHandle marker interface needed?","Body":"First of all thanks for your great work!\n\nI wonder if you guys can get rid of the IHandle marker interface if you query the \ngeneric IHandle<T> interfaces in this fashion:\n\n`var interfaces = handler.GetType().GetInterfaces().Where(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IHandle<>));`\n\nOr do i omit something?\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/19321660?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/jonnybi","Id":19321660,"Location":null,"Login":"jonnybi","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/jonnybi"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":7,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-07-13T12:57:03+00:00","UpdatedAt":"2017-06-02T00:40:36+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/347/reactions"}},{"Id":157415568,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/331","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/331","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/331/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/331/events","Number":331,"State":0,"Title":"The issue with static IOC","Body":"[IoC.cs](https://github.com/Caliburn-Micro/Caliburn.Micro/blob/master/src/Caliburn.Micro/IoC.cs) defines GetInstance and GetAllInstances as type static. \n\nI use Prism primarily, and required to load multiple instance of the same module with in the same app/process-space. In the module I author (which uses CM), I have defined custom type resolution in the bootstrapper via GetInstance and GetAllInstance, but as these methods are static, the last module upon instantiation overwrites the first module's IOC registration.\n\nI've asked this on [Stackoverflow](http://stackoverflow.com/questions/18743899/dealing-with-caliburn-micros-static-ioc), and the workaround though works. is bit hacky, and won't be acceptable in an enterprise application. I know this is going to be a breaking change but it would be better if the framework could support a fix out of the box so multiple instances of CM module can be loaded without overwriting internal IOC type registration.\n\n```\n    /// <summary>\n    /// Gets an instance by type and key.\n    /// </summary>\n    public static Func<Type, string, object> GetInstance = (service, key) => { throw new InvalidOperationException(\"IoC is not initialized.\"); };\n\n    /// <summary>\n    /// Gets all instances of a particular type.\n    /// </summary>\n    public static Func<Type, IEnumerable<object>> GetAllInstances = service => { throw new InvalidOperationException(\"IoC is not initialized.\"); };\n```\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/1779953?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/rohits79","Id":1779953,"Location":null,"Login":"rohits79","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/rohits79"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":5,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-05-30T01:01:54+00:00","UpdatedAt":"2016-06-01T05:49:44+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/331/reactions"}},{"Id":147182237,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/314","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/314","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/314/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/314/events","Number":314,"State":0,"Title":"Message.Attach picks wrong method because of similar name","Body":"Hello.\n\nI've experienced an issue with this commit: https://github.com/taori/SE-Calculator/commit/9a168ba34b9b422626f054a838ae69a0fa3df1e5 \n\nThe error i'm running into is with NewShipViewModel.cs basically i have 2 methods with the same name where only the parameter type is different. However it will only enter the method with Delete(Thruster item) if i click on both types. For an energy source it too will enter the method with a thruster, but pass a null as parameter.\n\nI suppose a little fix is required for caliburn to pick the correct method here?\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/5545184?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/taori","Id":5545184,"Location":null,"Login":"taori","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/taori"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":9,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2016-04-10T01:34:45+00:00","UpdatedAt":"2016-07-27T11:08:56+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/314/reactions"}},{"Id":122599456,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/270","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/270","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/270/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/270/events","Number":270,"State":0,"Title":"Attached events and memory profiling","Body":"Hi,\n\nI'm doing some memory profiling of my UWP (with a ShellView) app and I discovered that app leaks. I tried to isolate the problem by adding an empty View/VM with below lines in XAML:\n\n```\n<cm:Message.Attach>\n    [Event SizeChanged] = [OnViewSizeChanged($eventArgs)];\n</cm:Message.Attach>\n```\n\nWhen I navigate to that page and then back to the previous one (and doing so several times, forcing GC after all) both View and ViewModel seem to stay in memory forever (something that references Behaviors/Interaction SDKs keeps references). Removing above lines from XAML and replacing them with standard XAML SizeChanged=\"ThisPage_SizeChanged\" attribute problem is gone. \n\nOn the other hand using x:Name attribute for VIew/VM binding seems to work just fine. Only the attached events seem to be the problem.\n\nAny idea what can be wrong?\n\nThanks,\nLukasz\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/768540?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/coder89","Id":768540,"Location":null,"Login":"coder89","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/coder89"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":14,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-12-16T20:56:58+00:00","UpdatedAt":"2016-04-13T23:55:23+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/270/reactions"}},{"Id":119389642,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/253","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/253","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/253/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/253/events","Number":253,"State":0,"Title":"Consolidate error handling across different sorts of Actions","Body":"Currently an exception thrown in a coroutine (a method returning either `IEnumerable<IResult>`, `Task` or `Task<>`) when invoked through `Message.Attach` has it's exceptions handled in `Coroutine`, any exceptions would appear in `Coroutine.Completed`.\n\nThis also affects the event aggregator with `IHandleWithCoroutine` and `IHandleWithTask`.\n\nI consider this a potential issue because of the following\n\n``` csharp\n// Exception raised in Application.UnhandledException.\npublic void SampleMethod() { throw new InvalidOperationException(); }\n\n// Exception raised in Coroutine.Completed\npublic Task SampleMethod() { throw new InvalidOperationException(); }\n```\n\nWe could resolve this in two ways.\n1. Have `Coroutine.Completed` raise an unhandled exception event.\n2. Have `Coroutine.Completed` throw an exception on error.\n3. Do nothing but add some documentation.\n\nIf there is any change I'd like to get this into 3.0.0 as it suddenly cause new exceptions if they were previously being swallowed.\n\nThoughts?\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"},{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/question","Name":"question","Color":"cc317c"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":8,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-11-29T21:28:20+00:00","UpdatedAt":"2017-06-06T01:51:40+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/253/reactions"}},{"Id":118397808,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/249","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/249","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/249/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/249/events","Number":249,"State":0,"Title":"Plans for iOS Bindings/Conventions?  Sample included","Body":"What are the plans for 3.0 and iOS/Android for Bindings/Conventions.  Is there more work planned or are you looking at that as something to do after 3.0?\n\nI've put together some samples of what I'd like to see to get some feedback.  I had something like this working before 3.0 got underway, but moving it on top of Caliburn let me get rid of a good chunk of code and it's somewhat like the Xamarin sample in this repository.\n\nWhat I'd like centers around the bindings or conventions we normally get from Caliburn Micro.  Examples are [here](https://github.com/Kymeric/Caliburn.Micro.Mobile/blob/master/Examples/SimpleBindings/SimpleBindings.iOS/LoginViewController.cs) (UITextField and Button bindings) and [here](https://github.com/Kymeric/Caliburn.Micro.Mobile/blob/master/Examples/SimpleBindings/SimpleBindings.iOS/TableViewController.cs) (UITableView bindings).\n\nThe UITableView binding is where things get interesting, since implementing UITableViewSource is no small task.  With only a bit more code, it could support section headers, sorting, etc...  I'm not at all happy with the implementation of the Bindings yet.  The Binding classes are [here](https://github.com/Kymeric/Caliburn.Micro.Mobile/blob/master/Caliburn.Micro.Mobile.iOS/Bindings/) and while they work, there's already a lot of obvious room for cleanup.\n\nI've just started digging into the Caliburn Micro source, but would this make sense to move into a ConventionManager for the iOS platform?  Would this be something that even makes sense to pull into the main package, or would you rather keep it as a contrib package?  And if this seems viable/beneficial, I'd happily take any advice on how to make it fit better in Caliburn Micro or a contrib package.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/967068?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/jonstelly","Id":967068,"Location":null,"Login":"jonstelly","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/jonstelly"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/question","Name":"question","Color":"cc317c"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":1,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-11-23T14:53:13+00:00","UpdatedAt":"2015-11-25T23:11:21+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/249/reactions"}},{"Id":115527690,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/245","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/245","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/245/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/245/events","Number":245,"State":0,"Title":"Support async methods in Screen, IActivate etc","Body":"You can override `Screen`s `OnInitialize()` with the `async` keyword and use `await` within. By design of async-await the Activate method of Screen will continue. Therefore, while `OnInitialize()` is not completed yet, `OnActivate()` is already executed.\n\nThere are quite common cases where you would not like to have `OnActivate()` to run before `OnInitialize()` is completed. For that it is necessary to await `OnInitialize()` and every child task within there should be created with `TaskCreationOptions.AttachedToParent` (compare child tasks vs. nested tasks).\n\nIn your ViewModel inheriting from Screen you could then do:\n\n``` c#\nprotected async override Task OnInitialize()\n{\n    await Task.Factory.StartNew(() =>\n    {\n        this.configuration.Load(Properties.Settings.Default);\n    }, TaskCreationOptions.AttachedToParent);\n}\n```\n\nI have checked this with a copy of `Screen` as `ScreenAwaitingInit` which implements two things different (origin source from 1.5.2 but adoptable):\n\n``` c#\nasync void IActivate.Activate()\n{\n    if (this.IsActive)\n        return;\n    bool flag = false;\n    if (!this.IsInitialized)\n    {\n        this.IsInitialized = flag = true;\n        await this.OnInitialize();\n    }\n    this.IsActive = true;\n    ScreenAwaitingInit.Log.Info(\"Activating {0}.\", (object)this);\n    this.OnActivate();\n    this.Activated((object)this, new ActivationEventArgs()\n    {\n        WasInitialized = flag\n    });\n}\n\nprotected async virtual Task OnInitialize()\n{\n}\n```\n\nThis is to show what my problem is and what I am after.\n\nMaybe it is possible to support both ways in one `Screen` implementation or you could provide two `Screen` classes (inheriting most stuff from `ScreenBase`) either implementing one behaviour. But it would be great. I would even try to contribute a pull request if I would know what type of solution would be preferred.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/6481417?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/ZoolWay","Id":6481417,"Location":null,"Login":"ZoolWay","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/ZoolWay"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":31,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-11-06T15:37:50+00:00","UpdatedAt":"2016-11-01T08:39:46+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":3,"Plus1":3,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/245/reactions"}},{"Id":112966721,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/242","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/242","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/242/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/242/events","Number":242,"State":0,"Title":"DataGrid - Event Loaded trows exception \"no target found for method\"","Body":"Hi all,\n\nIn my WPF application, when I try to attach to the datagrid event loaded with:\ncal:Message.Attach=\"[Event Loaded] = [Action MyDataGridLoaded]\"\n\nMy action MyDataGridLoaded is not found in my view model. If I try to attach to another event like \"GotFocus\", the function is called correctly.\n\nDo you have any suggestions???\n\nRegards,\nBernardo\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/10706727?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/arcuri","Id":10706727,"Location":null,"Login":"arcuri","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/arcuri"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":8,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-10-23T07:17:56+00:00","UpdatedAt":"2015-11-16T02:07:34+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/242/reactions"}},{"Id":112442667,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/238","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/238","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/238/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/238/events","Number":238,"State":0,"Title":"Universal App - UnitTestProject can't start if having references to project using Caliburn.Micro","Body":"Hi all,\nI'm trying Caliburn.Micro in Universal App. I have a main project using Caliburn.Micro and I would like to create a UnitTestProject to test some functions in that main project. Therefore in UnitTestProject I make a reference to main project. Since then the UnitTestProject can't start anymore, I always receive an error message \"Cannot deserialize XBF metadata type list as 'CaliburnApplication' was not found in namespace 'Caliburn.Micro'\".\n\n![20-10-2015 21-21-11](https://cloud.githubusercontent.com/assets/6661713/10618506/9dfe82d0-7770-11e5-8fdd-3967b9df9a4a.jpg)\n\nHow can I fix this error? I also prepared a small demo. The unit test in demo can't run anymore.\nhttp://hintdesk.com/Web/Tmp/CaliburnMicroTest.zip\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars0.githubusercontent.com/u/6661713?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/rongchaua","Id":6661713,"Location":null,"Login":"rongchaua","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/rongchaua"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":4,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-10-20T19:27:39+00:00","UpdatedAt":"2016-08-24T20:00:32+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/238/reactions"}},{"Id":112233002,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/237","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/237","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/237/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/237/events","Number":237,"State":0,"Title":"Refactor ActionMessage to target DependencyObject.","Body":"Currently ActionMessage inherits `TriggerAction<FrameworkElement>`, this means in the new WinRT environment we can't use message bindings on non framework elements such as Flyout.\n\nWould need to have ActionMessage use some progressive enhancement to light up functionality if the attached target is a Framework Element.\n\nThis would light up functionality such as #236\n\nWe could also expand BindingScope to return named non Framework Elements (also a lot of work).\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":2,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-10-19T21:05:24+00:00","UpdatedAt":"2017-03-06T04:09:05+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/237/reactions"}},{"Id":70246127,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/157","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/157","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/157/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/157/events","Number":157,"State":0,"Title":"STA Unit Tests","Body":"Five of the unit tests rely on being STA which isn't supported with the latest version without some extra work detailed at https://github.com/xunit/samples.xunit/issues/2\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":1,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-04-22T21:58:31+00:00","UpdatedAt":"2015-05-07T23:18:56+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/157/reactions"}},{"Id":64730103,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/146","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/146","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/146/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/146/events","Number":146,"State":0,"Title":"TargetInvocationException with cal:Message.Attach","Body":"Clicking a button doesn't call my Edit-method anymore, throws a TargetInvocationException instead.\nThis code worked but since update of nuget package doesn't seem to work anymore...\n\n``` XML\n<UserControl \n    <!-- ... -->             \n         xmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\n             xmlns:cal=\"http://www.caliburnproject.org\">\n\n    <!-- ... -->  \n\n <ListBox Grid.Row=\"1\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"\n      <!-- ... -->\n          x:Name=\"lbFoo\">\n    <ListBox.ItemTemplate>\n                <DataTemplate>\n                    <Grid>\n                        <Grid.RowDefinitions>\n                            <RowDefinition Height=\"Auto\" />\n                            <RowDefinition Height=\"Auto\" />\n                        </Grid.RowDefinitions>\n                        <Grid.ColumnDefinitions>\n                            <ColumnDefinition Width=\"*\" />\n                            <ColumnDefinition Width=\"Auto\" />\n                            <ColumnDefinition Width=\"Auto\" />\n                        </Grid.ColumnDefinitions>\n\n                        <TextBlock Text=\"{Binding Bar, Mode=TwoWay}\" Grid.Row=\"0\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\" />\n            <!-- ... -->\n\n                        <Button Grid.Row=\"1\" Grid.Column=\"1\" \n                                Margin=\"0,0,5,0\" \n                                cal:Message.Attach=\"[Event Click] = [Action Edit($dataContext)]\"\n                                cal:Action.TargetWithoutContext=\"{Binding DataContext, ElementName=lbFoo}\"\n                                Visibility=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected, Converter={converter:BoolToVisibilityConverter}}\">\n                            <Rectangle Fill=\"{StaticResource imgABC}\" Width=\"16\" Height=\"16\" />\n                        </Button>\n    <!-- ... -->\n```\n\nTargetInvocationException was unhandled\n\nAn unhandled exception of type 'System.Reflection.TargetInvocationException' occurred in WindowsBase.dll\n\nAdditional information: Exception has been thrown by the target of an invocation.\n\nNo target found for method Edit.\n\n   at Caliburn.Micro.ActionMessage.Invoke(Object eventArgs)\n   at System.Windows.Interactivity.TriggerAction.CallInvoke(Object parameter)\n   at System.Windows.Interactivity.TriggerBase.InvokeActions(Object parameter)\n   at System.Windows.Interactivity.EventTriggerBase.OnEvent(EventArgs eventArgs)\n   at System.Windows.Interactivity.EventTriggerBase.OnEventImpl(Object sender, EventArgs eventArgs)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\n   at System.Windows.Controls.Primitives.ButtonBase.OnClick()\n   at System.Windows.Controls.Button.OnClick()\n   at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)\n   at System.Windows.UIElement.OnMouseLeftButtonUpThunk(Object sender, MouseButtonEventArgs e)\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\n   at System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)\n   at System.Windows.UIElement.OnMouseUpThunk(Object sender, MouseButtonEventArgs e)\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\n   at System.Windows.Input.InputManager.ProcessStagingArea()\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n   at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\n   at System.Windows.Window.ShowHelper(Object booleanBox)\n   at System.Windows.Window.Show()\n   at System.Windows.Window.ShowDialog()\n   at Caliburn.Micro.WindowManager.ShowDialog(Object rootModel, Object context, IDictionary`2 settings)\n   at my project :-) .someViewModel.ShowOptions() in c:\\Users....cs:line 120\n\nModule Information\n    Version:    4.0.30319.34209 built by: FX452RTMGDR\n    Original Location:  C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\WindowsBase\\v4.0_4.0.0.0_31bf3856ad364e35\\WindowsBase.dll\n\nVisual Studio 2013\n.NET 4.5\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/7447285?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/wstaelens","Id":7447285,"Location":null,"Login":"wstaelens","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/wstaelens"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/more%20info%20required","Name":"more info required","Color":"fbca04"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":11,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2015-03-27T09:54:36+00:00","UpdatedAt":"2015-07-13T08:06:36+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/146/reactions"}},{"Id":47644881,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/101","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/101","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/101/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/101/events","Number":101,"State":0,"Title":"Custom usage of ViewModelBinder.Bind(object, dependencyObject, object) not using conventions.","Body":"My assumption here is that I am doing something wrong, but need to ask the group and get a feedback that I can move forward with.\n\nI am using MahApps Metro for a UI control suite, and Caliburn Micro to orchestrate the interaction of screens.\n\nI have the following to show a custom dialog:\n\n``` C#\npublic IEnumerable<IResult> Handle(AggEvents.ShowDialog message) {\n    var screen = _LifetimeScope.Resolve(message.View);\n    if (screen != null) {\n        var view = ViewLocator.LocateForModel(screen, null, null) as BaseMetroDialog;\n        ViewModelBinder.Bind(screen, view, null);\n\n        var activator = screen as IActivate;\n\n        if (activator != null) {\n            activator.Activate();\n        }\n\n        yield return Window.ShowMetroDialogAsync(view).AsResult();\n    }\n}\n```\n\nWhat is happening is that if I do not call `cal:Message.Attach=\"Ok()\"` on my buttons, the commands are not binding appropriately on screen.\n\nI honestly feel as if I'm not doing something appropriately (and yes, I did x:Name=\"Ok\" for the Ok button, for example) already.\n\nAnyone with any help/advice on what I may have made a mistake on above... the help would be greatly appreciated.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/1635244?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/dealproc","Id":1635244,"Location":null,"Login":"dealproc","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/dealproc"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":23,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2014-11-03T21:11:38+00:00","UpdatedAt":"2015-05-03T21:58:04+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/101/reactions"}},{"Id":45382699,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/98","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/98","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/98/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/98/events","Number":98,"State":0,"Title":"Bind before setting content","Body":"Hello,\n\nWhen using `cal:View.Model`, I think the view should be bound to the VM before the control is assigned the view. Basically, it means swapping the calls to `SetContentProperty` and `ViewModelBinder.Bind` in [View.cs:292](https://github.com/Caliburn-Micro/Caliburn.Micro/blob/master/src/Caliburn.Micro.Platform/View.cs#L292).\n\nWhy? I'm currently getting \"temporary\" binding errors because when the view is initially created, the parent DataContext is used - just before being set correctly at the next line. Additionally, this improves performance since there is no DataContext changes: the various controls don't have to be completely bound twice.\n\nI'm using WPF in .NET 4.5.\n\nNote: I'm currently working around this problem by setting the data context in `ViewLocator.LocateForModel`, but it feels hacky.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1623034?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/MrJul","Id":1623034,"Location":null,"Login":"MrJul","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/MrJul"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":5,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2014-10-09T15:47:58+00:00","UpdatedAt":"2017-06-16T10:02:48+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/98/reactions"}},{"Id":41791690,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/92","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/92","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/92/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/92/events","Number":92,"State":0,"Title":"Some bindings not working in TabControl","Body":"Hello!\nI've noticed an issue when using `Caliburn.Micro` to connect `Views` and `ViewModels` in `TabControl`. Some of the `ElementName` bindings are not working, and what's interesting is that it happens only if there are more than one tab in `TabControl`.\nI have this issue in many places in my application, and I am attaching a sample application with one of this issues: https://drive.google.com/open?id=0B4RWnYweQI-GVUk1SUVGTmxkZ0E\n\nIn this sample there are two `TabControls`: left one is using `Caliburn.Micro` and the right one is using standard implicit `DataTemplates`. I've simulated tab's loading, so tab's contents are shown after a slight delay.\nSteps to reproduce:\n1) Add one tab with a button\n2) Click header checkbox and notice that it's working in both `TabControls`.\n3) Add one more tab.\n4) Click header checkbox and notice that checkbox in left `TabControl` is broken, but is working in the right one. This confirms that it is `Caliburn.Micro`'s issue.\n\nI think that it has something to do with a fact that the tab's `View` is collapsed during initialization.\nPlease fix this issue: I want to use `Caliburn.Micro`'s capabilities of wiring `Views` and `ViewModels` instead of writing implicit `DataTemplates`.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/7068016?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/stilettk","Id":7068016,"Location":null,"Login":"stilettk","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/stilettk"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":4,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2014-09-03T08:15:33+00:00","UpdatedAt":"2016-03-26T20:47:53+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/92/reactions"}},{"Id":40692244,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/86","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/86","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/86/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/86/events","Number":86,"State":0,"Title":"Replace IGuardClose.CanClose with CanCloseAsync","Body":"The current syntax of `CanClose` with a callback is quite difficult to chain. For example, if I'm deriving from a class already overriding `CanClose` and want to first check that it allowed closing before adding my own condition, the code will look like this:\n\n```\npublic override void CanClose(Action<bool> callback) {\n  base.CanClose(result => callback(result && condition));\n}\n```\n\nBy making CanCloseAsync, it's way more natural IMO:\n\n```\npublic override Task<bool> CanCloseAsync() {\n  return await base.CanCloseAsync() && condition();\n}\n```\n\nPlus, it allows to call other asynchronous methods easily.\nOf course, that would be a breaking change, unless a new interface is implemented.\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1623034?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/MrJul","Id":1623034,"Location":null,"Login":"MrJul","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/MrJul"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/enhancement","Name":"enhancement","Color":"84b6eb"}],"Assignee":null,"Assignees":[],"Milestone":{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/milestones/3","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/milestone/3","Number":3,"State":0,"Title":"v4.0.0","Description":"","Creator":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars3.githubusercontent.com/u/1256017?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/nigel-sampson","Id":1256017,"Location":null,"Login":"nigel-sampson","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/nigel-sampson"},"OpenIssues":13,"ClosedIssues":4,"CreatedAt":"2015-12-27T21:03:17+00:00","DueOn":null,"ClosedAt":null},"Comments":6,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2014-08-20T12:17:02+00:00","UpdatedAt":"2015-12-27T21:06:00+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":1,"Plus1":1,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/86/reactions"}},{"Id":40628184,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/85","HtmlUrl":"https://github.com/Caliburn-Micro/Caliburn.Micro/issues/85","CommentsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/85/comments","EventsUrl":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/85/events","Number":85,"State":0,"Title":"Action Parameter for DatePicker sends previous (old) SelectedDate value","Body":"When specifying an action parameter for a date picker like follows\n`<DatePicker x:Name =\"FromDatePicker\" cal:Message.Attach=\"LoadList($this, $source)\"/>`\nthe first parameter passed to LoadList will be the previously selected date value. The second paramater (the whole DatePicker UI component object) has the correct SelectedDate set to the new selected date. \nUnfortunatly passing the whole UI object breaks the internal usage of LoadList in my view model. Workaround is an adapter method, receiving $source, extracting the correct SelectedDate and passing it on to the real LoadList method. Works, but imho isn't really fine.\n\nThe following screenshot shows what happens when the 22nd was selected and I select the 24th\n![unbenannt](https://cloud.githubusercontent.com/assets/8495436/3971903/17dbcf16-27d8-11e4-8c06-1c6aaa624d8a.PNG)\n","ClosedBy":null,"User":{"Permissions":null,"SiteAdmin":false,"SuspendedAt":null,"Suspended":false,"LdapDistinguishedName":null,"AvatarUrl":"https://avatars2.githubusercontent.com/u/8495436?v=4","Bio":null,"Blog":null,"Collaborators":null,"Company":null,"CreatedAt":"0001-01-01T00:00:00+00:00","DiskUsage":null,"Email":null,"Followers":0,"Following":0,"Hireable":null,"HtmlUrl":"https://github.com/Loebe123","Id":8495436,"Location":null,"Login":"Loebe123","Name":null,"Type":0,"OwnedPrivateRepos":0,"Plan":null,"PrivateGists":null,"PublicGists":0,"PublicRepos":0,"TotalPrivateRepos":0,"Url":"https://api.github.com/users/Loebe123"},"Labels":[{"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/labels/bug","Name":"bug","Color":"fc2929"}],"Assignee":null,"Assignees":[],"Milestone":null,"Comments":5,"PullRequest":null,"ClosedAt":null,"CreatedAt":"2014-08-19T19:36:09+00:00","UpdatedAt":"2014-08-22T04:18:29+00:00","Locked":false,"Repository":null,"Reactions":{"TotalCount":0,"Plus1":0,"Minus1":0,"Laugh":0,"Confused":0,"Heart":0,"Hooray":0,"Url":"https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/issues/85/reactions"}}]